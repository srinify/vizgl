<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Srini Kadamati</title><link href="/" rel="alternate"></link><link href="/feeds/all.atom.xml" rel="self"></link><id>/</id><updated>2021-12-29T10:20:00-05:00</updated><entry><title>Apache Superset from Scratch: Day 6 (Database Class)</title><link href="/apache-superset-from-scratch-day-6-database-class.html" rel="alternate"></link><published>2021-12-29T10:20:00-05:00</published><updated>2021-12-29T10:20:00-05:00</updated><author><name>Srini Kadamati</name></author><id>tag:None,2021-12-29:/apache-superset-from-scratch-day-6-database-class.html</id><summary type="html">&lt;p&gt;I ended Day 5 with the knowledge of the Superset shell and a hunch that it might be a better tool for understanding the different code paths for how an example is loaded.&lt;/p&gt;
&lt;p&gt;Now I'm going to try running some commands to begin emulating what the app is doing when …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I ended Day 5 with the knowledge of the Superset shell and a hunch that it might be a better tool for understanding the different code paths for how an example is loaded.&lt;/p&gt;
&lt;p&gt;Now I'm going to try running some commands to begin emulating what the app is doing when loading an example. First things first, let's run the &lt;code&gt;utils.get_example_database()&lt;/code&gt; function call:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;superset.utils&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;core&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;utils&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;database&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;utils&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_example_database&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;database&lt;/span&gt;
&lt;span class="n"&gt;examples&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Interesting. Superset returns the string value "examples". This is likely just the string representation of the returned "Database" object. We know that the examples database in our Superset installation lives in my home directory, as a SQLite file. So running the next command within the &lt;code&gt;load_world_bank_health_n_pop()&lt;/code&gt; function should give us that information:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; engine = database.get_sqla_engine()
&amp;gt;&amp;gt;&amp;gt; engine
Engine(sqlite:////Users/srinik/.superset/superset.db)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Success! &lt;/p&gt;
&lt;h3&gt;The Superset Database Class&lt;/h3&gt;
&lt;p&gt;Next, I want to better understand the returned &lt;code&gt;database&lt;/code&gt; object. The class for Database is defined in  &lt;code&gt;superset/superset/models/core.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;Database&lt;/span&gt;(
    &lt;span class="n"&gt;Model&lt;/span&gt;, &lt;span class="n"&gt;AuditMixinNullable&lt;/span&gt;, &lt;span class="n"&gt;ImportExportMixin&lt;/span&gt;
):  &lt;span class="c1"&gt;# pylint: disable=too-many-public-methods&lt;/span&gt;

    &lt;span class="s"&gt;&amp;quot;&amp;quot;&amp;quot;An ORM object that stores Database related information&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="n"&gt;__tablename__&lt;/span&gt; = &lt;span class="s"&gt;&amp;quot;dbs&amp;quot;&lt;/span&gt;
    &lt;span class="nb"&gt;type&lt;/span&gt; = &lt;span class="s"&gt;&amp;quot;table&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;__table_args__&lt;/span&gt; = (&lt;span class="n"&gt;UniqueConstraint&lt;/span&gt;(&lt;span class="s"&gt;&amp;quot;database_name&amp;quot;&lt;/span&gt;),)

    &lt;span class="nb"&gt;id&lt;/span&gt; = &lt;span class="n"&gt;Column&lt;/span&gt;(&lt;span class="n"&gt;Integer&lt;/span&gt;, &lt;span class="n"&gt;primary_key&lt;/span&gt;=&lt;span class="nb"&gt;True&lt;/span&gt;)
    &lt;span class="n"&gt;verbose_name&lt;/span&gt; = &lt;span class="n"&gt;Column&lt;/span&gt;(&lt;span class="n"&gt;String&lt;/span&gt;(&lt;span class="mi"&gt;250&lt;/span&gt;), &lt;span class="nb"&gt;unique&lt;/span&gt;=&lt;span class="nb"&gt;True&lt;/span&gt;)
    &lt;span class="c1"&gt;# short unique name, used in permissions&lt;/span&gt;
    &lt;span class="n"&gt;database_name&lt;/span&gt; = &lt;span class="n"&gt;Column&lt;/span&gt;(&lt;span class="n"&gt;String&lt;/span&gt;(&lt;span class="mi"&gt;250&lt;/span&gt;), &lt;span class="nb"&gt;unique&lt;/span&gt;=&lt;span class="nb"&gt;True&lt;/span&gt;, &lt;span class="n"&gt;nullable&lt;/span&gt;=&lt;span class="nb"&gt;False&lt;/span&gt;)
    ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is the same file that has the model definition for the CSSTemplate class, as I stumbled into earlier in this series! At the top of &lt;code&gt;core.py&lt;/code&gt; is the following text:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A collection of ORM sqlalchemy models for Superset&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This file contains the class definitions for the following models:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Url&lt;/li&gt;
&lt;li&gt;KeyValue&lt;/li&gt;
&lt;li&gt;CssTemplate&lt;/li&gt;
&lt;li&gt;ConfigurationMethod&lt;/li&gt;
&lt;li&gt;Database&lt;/li&gt;
&lt;li&gt;Log&lt;/li&gt;
&lt;li&gt;FavStarClassName&lt;/li&gt;
&lt;li&gt;FavStar&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let's dive deeper into the Database class!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Columns / Fields&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The Database class defined in &lt;code&gt;core.py&lt;/code&gt; maps to the &lt;strong&gt;"dbs"&lt;/strong&gt; table in the metadata database, as suggested by this line of code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;__tablename__ = &amp;quot;dbs&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;What other columns are defined?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;id&lt;/code&gt;: integer, primary key&lt;/li&gt;
&lt;li&gt;&lt;code&gt;verbose_name&lt;/code&gt;: string, to specify a more human-friendly name?&lt;/li&gt;
&lt;li&gt;&lt;code&gt;database_name&lt;/code&gt;: string, name of the database&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sqlalchemy_uri&lt;/code&gt;: string, likely the URI sent to the underlying database driver to connect&lt;/li&gt;
&lt;li&gt;&lt;code&gt;password&lt;/code&gt;: salted password&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cache_timeout&lt;/code&gt;: integer, corresponding to the cache timeout in seconds at the database level&lt;/li&gt;
&lt;li&gt;&lt;code&gt;select_as_create_table_as&lt;/code&gt;: boolean, not sure what this does&lt;/li&gt;
&lt;li&gt;&lt;code&gt;expose_in_sqllab&lt;/code&gt;: boolean, should this db be exposed in SQL Lab?&lt;/li&gt;
&lt;li&gt;&lt;code&gt;configuration_method&lt;/code&gt;: string, type of form used to configure?&lt;/li&gt;
&lt;li&gt;several &lt;code&gt;allow_&lt;/code&gt; fields around async, file upload, CTAS, CVAS, DML, multi schema metadata fetch, and other user-configurable features&lt;/li&gt;
&lt;li&gt;several &lt;code&gt;extra_&lt;/code&gt; fields around encryption, fields, etc.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;and more&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;String Representation&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We know from our earlier exploration that running &lt;code&gt;print()&lt;/code&gt; on a Superset Database object returns the database name. This aligns with the &lt;code&gt;__repr__()&lt;/code&gt; definition for this model!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__repr__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="kr"&gt;return&lt;/span&gt; &lt;span class="kr"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Name Attribute&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If I call the &lt;code&gt;.name&lt;/code&gt; attribute on a Database object, the following is evaluated:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="kr"&gt;return&lt;/span&gt; &lt;span class="kr"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;verbose_name&lt;/span&gt; &lt;span class="nf"&gt;if&lt;/span&gt; &lt;span class="kr"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;verbose_name&lt;/span&gt; &lt;span class="n"&gt;else&lt;/span&gt; &lt;span class="kr"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;database_name&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Interesting -- now we know how &lt;code&gt;verbose_name&lt;/code&gt; is used! It's the preference for showing to humans, and &lt;code&gt;database_name&lt;/code&gt; is the backup value displayed.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Data Attribute&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;What's next? The &lt;code&gt;.data&lt;/code&gt; attribute looks interesting:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;@property&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Dict&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;str, Any&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I want to run this for my Examples SQLite database and see what's returned:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; database.data
    {&amp;#39;id&amp;#39;: 1, 
    &amp;#39;name&amp;#39;: &amp;#39;examples&amp;#39;, 
    &amp;#39;backend&amp;#39;: &amp;#39;sqlite&amp;#39;, 
    &amp;#39;configuration_method&amp;#39;: &amp;#39;sqlalchemy_form&amp;#39;, 
    &amp;#39;allow_multi_schema_metadata_fetch&amp;#39;: False, 
    &amp;#39;allows_subquery&amp;#39;: True, 
    &amp;#39;allows_cost_estimate&amp;#39;: False, 
    &amp;#39;allows_virtual_table_explore&amp;#39;: True, 
    &amp;#39;explore_database_id&amp;#39;: 1, 
    &amp;#39;parameters&amp;#39;: {}, 
    &amp;#39;parameters_schema&amp;#39;: {}}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Reserved Words&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Neat! I can also retrieve the reserved words for the database:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;database&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_reserved_words&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;right&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;select&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;check&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;having&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;virtual&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;before&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;fail&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;conflict&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;current_timestamp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;escape&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;full&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;case&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;references&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;drop&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;begin&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;cast&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;view&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;of&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;insert&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;on&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;outer&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;cascade&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;in&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;attach&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;inner&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;vacuum&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;deferred&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;add&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;for&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;temporary&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;union&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;update&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;offset&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;as&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;where&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;transaction&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;explain&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;indexed&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;group&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;limit&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;to&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pragma&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;unique&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;raise&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;initially&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;distinct&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;column&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;asc&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;notnull&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;null&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;between&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;rollback&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;end&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;when&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;deferrable&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;detach&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;match&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;all&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;temp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;isnull&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;join&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;trigger&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;query&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;from&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;autoincrement&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ignore&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;after&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;table&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;order&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;alter&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;reindex&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;is&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;intersect&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;primary&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;then&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;and&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;set&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;like&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;index&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;by&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;default&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;else&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;rename&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;plan&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;except&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;row&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;instead&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;natural&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;analyze&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;foreign&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;database&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;if&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;current_time&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;glob&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;current_date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;cross&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;key&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;values&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;into&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;constraint&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;exists&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;left&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;delete&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;each&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;or&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;false&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;commit&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;exclusive&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;immediate&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;restrict&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;not&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;create&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;desc&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;true&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;using&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;replace&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;collate&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Previewing Raw Data&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I want to peek at the data in my SQLite database. The &lt;a href="https://sqlitebrowser.org/dl/"&gt;DB Browser for SQLite app&lt;/a&gt; on Mac is a good option for this. Better yet, once installed, I can use my terminal to pass the app the file location of my sqlite DB!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;open&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;DB Browser for SQLite&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;Users&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;srinik&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;.&lt;span class="nv"&gt;superset&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;superset&lt;/span&gt;.&lt;span class="nv"&gt;db&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And voila!&lt;/p&gt;
&lt;p&gt;&lt;img alt="DB Browser" src="/images/db_browser.png"&gt;&lt;/p&gt;
&lt;p&gt;Let's preview the &lt;code&gt;dbs&lt;/code&gt; table (which corresponds to the Database model).&lt;/p&gt;
&lt;p&gt;&lt;img alt="DB Browser DBs" src="/images/db_browser_dbs.png"&gt;&lt;/p&gt;
&lt;p&gt;It's nice to see all of the columns reflected here from the Database model.&lt;/p&gt;
&lt;h3&gt;World Health Dashboard: Examples Database&lt;/h3&gt;
&lt;p&gt;Let's revisit the &lt;code&gt;load_world_bank_health_n_pop()&lt;/code&gt; function that loads the World Health Dashboard.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;load_world_bank_health_n_pop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;  &lt;span class="c1"&gt;# pylint: disable=too-many-locals, too-many-statements&lt;/span&gt;
    &lt;span class="n"&gt;only_metadata&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb nb-Type"&gt;bool&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;force&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb nb-Type"&gt;bool&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb nb-Type"&gt;bool&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Loads the world bank health dataset, slices and a dashboard&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="n"&gt;tbl_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;wb_health_population&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;database&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;utils&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_example_database&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;engine&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;database&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_sqla_engine&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;schema&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;inspect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;engine&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;default_schema_name&lt;/span&gt;
    &lt;span class="n"&gt;table_exists&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;database&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;has_table_by_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tbl_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This code does the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sets the table name to &lt;code&gt;wb_health_population&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Uses utility functions to fetch the Database object corresponding to the &lt;code&gt;examples&lt;/code&gt; database (or creates it if it isn't there)&lt;/li&gt;
&lt;li&gt;Retrieves the SQLAlchemy engine for this specific database flavor (from the &lt;code&gt;db_engine_specs&lt;/code&gt; folder) so queries can be made to the database.&lt;/li&gt;
&lt;li&gt;Retrieves the default schema name if it exists.&lt;/li&gt;
&lt;li&gt;Confirms if the &lt;code&gt;wb_health_population&lt;/code&gt; table exists or not.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;World Health Dashboard: Pandas Transformation&lt;/h3&gt;
&lt;p&gt;As someone who's spent years writing pandas code, the next part of of the &lt;code&gt;load_world_bank_health_n_pop()&lt;/code&gt; function looks very familiar:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="k"&gt;not&lt;/span&gt; &lt;span class="n"&gt;only_metadata&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;not&lt;/span&gt; &lt;span class="n"&gt;table_exists&lt;/span&gt; &lt;span class="k"&gt;or&lt;/span&gt; &lt;span class="k"&gt;force&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_example_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;countries.json.gz&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;pdf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;pdf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;columns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;_&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;pdf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;columns&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;backend&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;presto&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;pdf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pdf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;pdf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pdf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strftime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%Y-%m-%d %H:%M%:%S&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;pdf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pdf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;pdf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pdf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;sample&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;pdf&lt;/span&gt;

        &lt;span class="n"&gt;pdf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_sql&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;tbl_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;engine&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;schema&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;schema&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;if_exists&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;replace&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;chunksize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mh"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;dtype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="p"&gt;#&lt;/span&gt; &lt;span class="n"&gt;TODO&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bkyryliuk&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;use&lt;/span&gt; &lt;span class="n"&gt;TIMESTAMP&lt;/span&gt; &lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;presto&lt;/span&gt;
                &lt;span class="s"&gt;&amp;quot;year&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;DateTime&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;backend&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;presto&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;255&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                &lt;span class="s"&gt;&amp;quot;country_code&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                &lt;span class="s"&gt;&amp;quot;country_name&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;255&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                &lt;span class="s"&gt;&amp;quot;region&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;255&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;multi&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here's my breakdown of the code:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;data = get_example_data("countries.json.gz")&lt;/code&gt;:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;get_example_data()&lt;/code&gt; is a helper function that fetches the gzipped JSON dataset for this example from &lt;code&gt;https://github.com/apache-superset/examples-data/blob/master/countries.json.gz&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pdf = pd.read_json(data)&lt;/code&gt;: &lt;ul&gt;
&lt;li&gt;read in JSON as a pandas dataframe&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pdf.columns = [col.replace(".", "_") for col in pdf.columns]&lt;/code&gt;: &lt;ul&gt;
&lt;li&gt;replace any periods with &lt;code&gt;_&lt;/code&gt;, so the database is happy&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;if database.backend == "presto":&lt;/code&gt; if the examples Database object points to a Presto database, do some specific datetime conversion for Presto.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pdf.to_sql()&lt;/code&gt;: use the &lt;code&gt;pandas.DataFrame.to_sql()&lt;/code&gt; method to generate a SQLAlchemy 'query' to insert data into the database.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Phew! That's it for today. Tomorrow, I want to finish understanding how the Superset-specific metadata is loaded.&lt;/p&gt;</content><category term="Review"></category></entry><entry><title>Apache Superset from Scratch: Day 5 (More Flask App)</title><link href="/apache-superset-from-scratch-day-5-more-flask-app.html" rel="alternate"></link><published>2021-12-28T10:20:00-05:00</published><updated>2021-12-28T10:20:00-05:00</updated><author><name>Srini Kadamati</name></author><id>tag:None,2021-12-28:/apache-superset-from-scratch-day-5-more-flask-app.html</id><summary type="html">&lt;p&gt;I ended Day 4 trying to understand how the World Health dashboard was imported. I walked away with a lot of open questions around how the flask app factory pattern worked. After sleeping on it and approaching with fresh eyes, I'm excited to hopefully make more progress today.&lt;/p&gt;
&lt;h3&gt;Flask App …&lt;/h3&gt;</summary><content type="html">&lt;p&gt;I ended Day 4 trying to understand how the World Health dashboard was imported. I walked away with a lot of open questions around how the flask app factory pattern worked. After sleeping on it and approaching with fresh eyes, I'm excited to hopefully make more progress today.&lt;/p&gt;
&lt;h3&gt;Flask App Context&lt;/h3&gt;
&lt;p&gt;I spent the morning reading the following articles from the excellent Flask documentation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://flask.palletsprojects.com/en/2.0.x/appcontext/"&gt;the Application Context&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://flask.palletsprojects.com/en/2.0.x/api/#flask.Config"&gt;class flask.Config&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://flask.palletsprojects.com/en/2.0.x/patterns/appfactories/"&gt;Application Factories&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://flask.palletsprojects.com/en/2.0.x/config/#configuring-from-python-files"&gt;Configuring from Python Files&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After going deep into these, I'll attempt to walkthrough everything I learned.&lt;/p&gt;
&lt;p&gt;As I mentioned in the last post, the crucial entry-point into the Flask application is the &lt;code&gt;create_app()&lt;/code&gt; function from &lt;code&gt;superset/superset/app.py&lt;/code&gt;. Here's the entire function definition:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;create_app&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SupersetApp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;try&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;Allow&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;override&lt;/span&gt; &lt;span class="n"&gt;our&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="n"&gt;completely&lt;/span&gt;
        &lt;span class="n"&gt;config_module&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;SUPERSET_CONFIG&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;superset.config&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_object&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;config_module&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;app_initializer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;APP_INITIALIZER&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SupersetAppInitializer&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;app_initializer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;init_app&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="kr"&gt;return&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;

    &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;Make&lt;/span&gt; &lt;span class="n"&gt;sure&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;bootstrap&lt;/span&gt; &lt;span class="n"&gt;errors&lt;/span&gt; &lt;span class="n"&gt;ALWAYS&lt;/span&gt; &lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;logged&lt;/span&gt;
    &lt;span class="kr"&gt;except&lt;/span&gt; &lt;span class="n"&gt;Exception&lt;/span&gt; &lt;span class="kr"&gt;as&lt;/span&gt; &lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exception&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Failed to create app&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;ex&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Within &lt;code&gt;create_app()&lt;/code&gt;, the following line of code defines what &lt;code&gt;current_app&lt;/code&gt; refers to: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;app = SupersetApp(__name__)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;current_app&lt;/code&gt; variable acts as a global variable for different parts of your application to reference &amp;amp; use. The following line of code retrieves information from the &lt;code&gt;SUPERSET_CONFIG&lt;/code&gt; environment variable (using &lt;code&gt;os.environ.get()&lt;/code&gt;) and defaults to &lt;code&gt;superset.config&lt;/code&gt; if not found:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;config_module = os.environ.get(&amp;quot;SUPERSET_CONFIG&amp;quot;, &amp;quot;superset.config&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then, the configuration information is loaded and attached to the &lt;code&gt;app&lt;/code&gt; object (elsewhere in the application it would be referenced as &lt;code&gt;current_app&lt;/code&gt;).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;app.config.from_object(config_module)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;All of the information so far suggests that the &lt;code&gt;SQLALCHEMY_EXAMPLES_URI&lt;/code&gt; value is meant to be configured, which makes sense! &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;By default in a native Superset installation, the SQLite database in my home directory is used. &lt;/li&gt;
&lt;li&gt;But within the Docker Compose image for Superset, the included Postgres database is used instead.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There's still SO much I don't understand about Flask, but I need to do a separate, multi-day deep dive into that web framework. I want to balance breadth with depth here and it may be time to move on with the cursory understanding I have.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note to self: Go through &lt;a href="https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-xv-a-better-application-structure"&gt;Flask mega-tutorial&lt;/a&gt;, which seems to be consistently recommended by people online!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Examples Database&lt;/h3&gt;
&lt;p&gt;I want to come back for air, and circle back to how the World Health dashboard is loaded into the Superset metadata database. I want to understand this function better, which is called from the &lt;code&gt;load_world_bank_health_n_pop()&lt;/code&gt; function in &lt;code&gt;world_bank.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;get_example_database&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Database&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;db_uri&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;current_app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;SQLALCHEMY_EXAMPLES_URI&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="kr"&gt;or&lt;/span&gt; &lt;span class="n"&gt;current_app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;SQLALCHEMY_DATABASE_URI&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kr"&gt;return&lt;/span&gt; &lt;span class="n"&gt;get_or_create_db&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;examples&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;db_uri&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The first clause looks interesting:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;db_uri = (
        current_app.config.get(&amp;quot;SQLALCHEMY_EXAMPLES_URI&amp;quot;)
        or current_app.config[&amp;quot;SQLALCHEMY_DATABASE_URI&amp;quot;]
    )
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This code is attempting to look up the database URI based on the app's configuration settings. We know that &lt;code&gt;current_app.config.get()&lt;/code&gt; looks up values from &lt;code&gt;superset/superset/config.py&lt;/code&gt;. At 1337 lines of code, the &lt;code&gt;config.py&lt;/code&gt; file is massive. It contains code mostly assigning values to all-upper-case variable names. Here's an example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;SQLALCHEMY_EXAMPLES_URI = None
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here's a walkthrough of how &lt;code&gt;db_uri&lt;/code&gt; is calculated:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The first clause is attempting to find a truthy value, between &lt;code&gt;SQLALCHEMY_EXAMPLES_URI&lt;/code&gt; and &lt;code&gt;SQLALCHEMY_DATABASE_URI&lt;/code&gt;. &lt;/li&gt;
&lt;li&gt;Because by default &lt;code&gt;SQLALCHEMY_EXAMPLES_URI&lt;/code&gt; is set to &lt;code&gt;None&lt;/code&gt;, the value for &lt;code&gt;SQLALCHEMY_DATABASE_URI&lt;/code&gt; is then looked up.&lt;/li&gt;
&lt;li&gt;By default, &lt;code&gt;SQLALCHEMY_DATABASE_URI&lt;/code&gt; is assigned to evaluate: &lt;code&gt;"sqlite:///" + os.path.join(DATA_DIR, "superset.db")&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now we're getting somewhere! The &lt;code&gt;sqlite:///&lt;/code&gt; and &lt;code&gt;"superset.db"&lt;/code&gt; parts &lt;em&gt;smells&lt;/em&gt; a lot like the location of the sqlite metadata database that lives in my home directory that I dug up in &lt;a href="/apache-superset-from-scratch-day-2-metadata-database.html"&gt;my Day 2 post&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;cat ~/.superset/superset.db
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;But what's this &lt;code&gt;DATA_DIR&lt;/code&gt; value and how is it computed? I did a quick search within &lt;code&gt;superset/superset/config.py&lt;/code&gt; and the first instance of &lt;code&gt;DATA_DIR&lt;/code&gt; is referenced here:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;SUPERSET_HOME&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;os&lt;/span&gt;.&lt;span class="nv"&gt;environ&lt;/span&gt;:
    &lt;span class="nv"&gt;DATA_DIR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;os&lt;/span&gt;.&lt;span class="nv"&gt;environ&lt;/span&gt;[&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;SUPERSET_HOME&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;]
&lt;span class="k"&gt;else&lt;/span&gt;:
    &lt;span class="nv"&gt;DATA_DIR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;os&lt;/span&gt;.&lt;span class="nv"&gt;path&lt;/span&gt;.&lt;span class="nv"&gt;join&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;os&lt;/span&gt;.&lt;span class="nv"&gt;path&lt;/span&gt;.&lt;span class="nv"&gt;expanduser&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;~&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;.superset&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Because I didn't specifically set &lt;code&gt;SUPERSET_HOME&lt;/code&gt; in my environment variables, then the second code path is being evaluated instead:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;DATA_DIR = os.path.join(os.path.expanduser(&amp;quot;~&amp;quot;), &amp;quot;.superset&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I quickly ran this in a new Python shell and the result mapped exactly to the &lt;code&gt;.superset/&lt;/code&gt; folder within my home directory:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Data Dir" src="/images/data_dir.png"&gt;&lt;/p&gt;
&lt;p&gt;This means that &lt;code&gt;SQLALCHEMY_DATABASE_URI&lt;/code&gt; points to my metadata database, as expected. Progress!&lt;/p&gt;
&lt;p&gt;Finally, this means that the &lt;code&gt;get_example_database()&lt;/code&gt; function will return the location to my sqlite database or it will create it if it doesn't exist (as the name &lt;code&gt;get_or_create_db()&lt;/code&gt; suggests):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;get_or_create_db&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;examples&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;, &lt;span class="nv"&gt;db_uri&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The return value of &lt;code&gt;utils.get_example_database()&lt;/code&gt; is assigned to the &lt;code&gt;database&lt;/code&gt; variable.&lt;/p&gt;
&lt;h3&gt;Superset Shell&lt;/h3&gt;
&lt;p&gt;While reading function definitions is great, the only way to learn technical concepts is getting your hands dirty and actually running code yourself. &lt;/p&gt;
&lt;p&gt;What's the best way to actually accomplish this though, while having the application lifecycle state loaded for me to interact with?&lt;/p&gt;
&lt;p&gt;Some searching online led me to this &lt;a href="https://flask.palletsprojects.com/en/2.0.x/cli/#open-a-shell"&gt;page in the Flask docs&lt;/a&gt;, which mentions the following:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;To explore the data in your application, you can start an interactive Python shell with the shell command. An application context will be active, and the app instance will be imported.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I also know that Superset extends many of the underlying Flask metaphors and I remember seeing &lt;code&gt;superset shell&lt;/code&gt; listed when running the Superset CLI:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;...
run                       Run a development server.
set-database-uri          Updates a database connection URI
shell                     Run a shell in the app context.
sync-tags                 Rebuilds special tags (owner, type, favorited
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I'm going to try this out:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;superset shell
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Excellent! I now have a shell environment with the Superset App context loaded in:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Superset Shell" src="/images/superset_shell.png"&gt;&lt;/p&gt;
&lt;h3&gt;Next Steps&lt;/h3&gt;
&lt;p&gt;I've run out of time for the day and will end here. Next, I want to step through all of the function calls in the World Health dashboard example using the Superset shell.&lt;/p&gt;</content><category term="Review"></category></entry><entry><title>Apache Superset from Scratch: Day 4 (Superset &amp; Flask Entrypoint)</title><link href="/apache-superset-from-scratch-day-4-superset-flask-entrypoint.html" rel="alternate"></link><published>2021-12-26T10:20:00-05:00</published><updated>2021-12-26T10:20:00-05:00</updated><author><name>Srini Kadamati</name></author><id>tag:None,2021-12-26:/apache-superset-from-scratch-day-4-superset-flask-entrypoint.html</id><summary type="html">&lt;p&gt;I ended Day 3 by setting up the backend and frontend servers, but running into the following error.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Superset UI" src="/images/superset_ui.png"&gt;&lt;/p&gt;
&lt;p&gt;For good measure, I'm going to shut down and restart the backend server. Success!&lt;/p&gt;
&lt;p&gt;&lt;img alt="Superset UI Fixed" src="/images/superset_ui_fixed.png"&gt;&lt;/p&gt;
&lt;p&gt;No thumbnails though ☹️. Well I do know from previous experience that thumbnails require setting up a separate celery …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I ended Day 3 by setting up the backend and frontend servers, but running into the following error.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Superset UI" src="/images/superset_ui.png"&gt;&lt;/p&gt;
&lt;p&gt;For good measure, I'm going to shut down and restart the backend server. Success!&lt;/p&gt;
&lt;p&gt;&lt;img alt="Superset UI Fixed" src="/images/superset_ui_fixed.png"&gt;&lt;/p&gt;
&lt;p&gt;No thumbnails though ☹️. Well I do know from previous experience that thumbnails require setting up a separate celery server. This will need separate investigation.&lt;/p&gt;
&lt;p&gt;Now that I have Superset up and running, what should I look into next? I really want to dive deeper into how the example datasets, charts, and dashboards are loaded. This will force me to better understand the internal Superset data model.&lt;/p&gt;
&lt;h3&gt;How the Superset Examples Work&lt;/h3&gt;
&lt;p&gt;The world health dashboard looks interesting and like one of the more complex ones. I'll start by poking deeper into this one:&lt;/p&gt;
&lt;p&gt;&lt;img alt="World Health Dashboards" src="/images/world_health_dashboard.png"&gt;&lt;/p&gt;
&lt;p&gt;Here's the relevant function call from &lt;code&gt;superset/cli.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Loading [World Bank&amp;#39;s Health Nutrition and Population Stats]&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;examples&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load_world_bank_health_n_pop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;only_metadata&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;force&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Sooo, let's get into it. Where does the second line of code actually point to? As I mentioned in &lt;a href="/apache-superset-from-scratch-day-2-metadata-database.html"&gt;Day 2&lt;/a&gt;, the &lt;code&gt;superset/superset/examples/__init__.py&lt;/code&gt; file contains mappings like this one:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.world_bank&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;load_world_bank_health_n_pop&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This means that the &lt;code&gt;load_world_bank_health_n_pop()&lt;/code&gt; function lives in &lt;code&gt;examples/world_bank.py&lt;/code&gt;! Here's a preview of the first 8 lines:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;load_world_bank_health_n_pop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;  &lt;span class="c1"&gt;# pylint: disable=too-many-locals, too-many-statements&lt;/span&gt;
    &lt;span class="n"&gt;only_metadata&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb nb-Type"&gt;bool&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;force&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb nb-Type"&gt;bool&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb nb-Type"&gt;bool&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Loads the world bank health dataset, slices and a dashboard&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;tbl_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;wb_health_population&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;database&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;utils&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_example_database&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;engine&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;database&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_sqla_engine&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;schema&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;inspect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;engine&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;default_schema_name&lt;/span&gt;
    &lt;span class="n"&gt;table_exists&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;database&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;has_table_by_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tbl_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The first line almost surely refers to the table name in the examples database.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;tbl_name = &amp;quot;wb_health_population&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;How can I confirm this? The fastest way is to probably crack open SQL Lab and inspect the table name for the examples database.&lt;/p&gt;
&lt;p&gt;&lt;img alt="World Health Table" src="/images/wb_sqllab.png"&gt;&lt;/p&gt;
&lt;p&gt;Confirmed. Let's check out the next line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;database = utils.get_example_database()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Ah yes, the art of the &lt;code&gt;utils&lt;/code&gt;! The perfect hiding place for some arbitrary functions. Where does this point to?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;superset.utils&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;core&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;utils&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So there should be a &lt;code&gt;utils/core.py&lt;/code&gt; file. Oh boy, this file is 1835 lines of code. But it does have the &lt;code&gt;get_example_database()&lt;/code&gt; function that's called. The function definition is pretty short so I'm including it here in it's entireity:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;get_example_database&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Database&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;db_uri&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;current_app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;SQLALCHEMY_EXAMPLES_URI&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="kr"&gt;or&lt;/span&gt; &lt;span class="n"&gt;current_app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;SQLALCHEMY_DATABASE_URI&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kr"&gt;return&lt;/span&gt; &lt;span class="n"&gt;get_or_create_db&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;examples&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;db_uri&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now we're getting somewhere! This function tells the app which database is designated as the &lt;strong&gt;examples&lt;/strong&gt; one. First things first, where is &lt;code&gt;current_app&lt;/code&gt; defined?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;current_app&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;flash&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Markup&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;current_app&lt;/code&gt; object is imported from &lt;a href="https://flask.palletsprojects.com/en/2.0.x/"&gt;flask&lt;/a&gt;, which is a Python microframework for creating web applications. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note to self: I need to dig into the relationship between Flask and Flask App-builder later on.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;After a quick Google search, I found the page in the flask documentation on &lt;a href="https://flask.palletsprojects.com/en/2.0.x/appcontext/"&gt;the current application context&lt;/a&gt;. Perusing this page, this reminds me a lot of of the &lt;code&gt;request&lt;/code&gt; object from my Ruby on Rails days. This was a form of passing application state around.&lt;/p&gt;
&lt;p&gt;This is essentially a way to reference values specific to the current instance running of the running Superset application.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The application context keeps track of the application-level data during a request, CLI command, or other activity. Rather than passing the application around to each function, the current_app and g proxies are accessed instead.&lt;/p&gt;
&lt;p&gt;This is similar to The Request Context, which keeps track of request-level data during a request. A corresponding application context is pushed when a request context is pushed.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Well what do you know! There's a call out to the &lt;a href="https://flask.palletsprojects.com/en/2.0.x/reqcontext/"&gt;flask version of the request object&lt;/a&gt; that's similar to the one from Rails! My hunch was spot on.&lt;/p&gt;
&lt;h3&gt;App Factory Pattern&lt;/h3&gt;
&lt;p&gt;To take a step back, what actually happens when I run &lt;code&gt;superset run&lt;/code&gt; from the CLI?&lt;/p&gt;
&lt;p&gt;The &lt;a href="https://flask.palletsprojects.com/en/2.0.x/tutorial/factory/"&gt;flask documentation&lt;/a&gt; suggests that the &lt;code&gt;def create_app()&lt;/code&gt; function definition is likely to be the &lt;strong&gt;entrypoint&lt;/strong&gt; to the flask application at the core of Superset that is called when &lt;code&gt;flask run&lt;/code&gt; or an equivalent is run.&lt;/p&gt;
&lt;p&gt;A quick search in my text editor found only one non-test-related definition for &lt;code&gt;create_app()&lt;/code&gt;, found in &lt;code&gt;superset/superset/app.py&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img alt="App Py" src="/images/app_py.png"&gt;&lt;/p&gt;
&lt;p&gt;These lines especially look relevant to our investigation of how:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the World Health dashboard is loaded&lt;/li&gt;
&lt;li&gt;how &lt;code&gt;current_app.config.get("SQLALCHEMY_EXAMPLES_URI")&lt;/code&gt; resolves&lt;/li&gt;
&lt;li&gt;getting closer to &lt;code&gt;current_app&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;try:
    # Allow user to override our config completely
    config_module = os.environ.get(&amp;quot;SUPERSET_CONFIG&amp;quot;, &amp;quot;superset.config&amp;quot;)
    app.config.from_object(config_module)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Next Steps&lt;/h3&gt;
&lt;p&gt;I feel closer to understanding all of the links here, but sadly I'm out of time today. Here are the open questions I still have:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What's the link between &lt;code&gt;create_app()&lt;/code&gt; and &lt;code&gt;current_app&lt;/code&gt;?&lt;/li&gt;
&lt;li&gt;Where is the value for &lt;code&gt;SQLALCHEMY_EXAMPLES_URI&lt;/code&gt; actually set?&lt;/li&gt;
&lt;li&gt;How does this line of code actually work: &lt;code&gt;os.environ.get("SUPERSET_CONFIG", "superset.config")&lt;/code&gt;?&lt;/li&gt;
&lt;/ul&gt;</content><category term="Review"></category></entry><entry><title>Apache Superset from Scratch: Day 3 (Frontend Setup)</title><link href="/apache-superset-from-scratch-day-3-frontend-setup.html" rel="alternate"></link><published>2021-12-25T10:20:00-05:00</published><updated>2021-12-25T10:20:00-05:00</updated><author><name>Srini Kadamati</name></author><id>tag:None,2021-12-25:/apache-superset-from-scratch-day-3-frontend-setup.html</id><summary type="html">&lt;p&gt;In Day 3, I'm going to dive into setting up the frontend. In general, I'm quite new to the frontend ecosystem, so expect lots of tangents to fill in knowledge gaps along the way!&lt;/p&gt;
&lt;p&gt;We'll start with the &lt;a href="https://github.com/apache/superset/blob/master/CONTRIBUTING.md#frontend"&gt;Frontend section from CONTRIBUTING.MD&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The first paragraph has some helpful historical …&lt;/p&gt;</summary><content type="html">&lt;p&gt;In Day 3, I'm going to dive into setting up the frontend. In general, I'm quite new to the frontend ecosystem, so expect lots of tangents to fill in knowledge gaps along the way!&lt;/p&gt;
&lt;p&gt;We'll start with the &lt;a href="https://github.com/apache/superset/blob/master/CONTRIBUTING.md#frontend"&gt;Frontend section from CONTRIBUTING.MD&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The first paragraph has some helpful historical context:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Frontend assets (TypeScript, JavaScript, CSS, and images) must be compiled in order to properly display the web UI. The superset-frontend directory contains all NPM-managed frontend assets. Note that for some legacy pages there are additional frontend assets bundled with Flask-Appbuilder (e.g. jQuery and bootstrap). These are not managed by NPM and may be phased out in the future.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Node&lt;/h3&gt;
&lt;p&gt;Thankfully, I've used Node a little bit before. Let me check what version I have installed on this computer. Usually the &lt;code&gt;--version&lt;/code&gt; flag will do the trick!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;node --version
&amp;gt; v17.3.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The guide recommends Node 16, but Node 17.x should be fine. Let's check the &lt;code&gt;npm&lt;/code&gt; version next. Npm is the Node package manager:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;npm --version
&amp;gt; 8.3.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The guide recommends using &lt;code&gt;nvm&lt;/code&gt; to manage different Node versions. This is helpful advice, but I don't want to prematurely optimize and add more abstraction / complexity than needed. So let's soldier on for now.&lt;/p&gt;
&lt;h3&gt;Package.json&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;package.json&lt;/code&gt; is the Node equivalent to Python's &lt;code&gt;requirements.txt&lt;/code&gt; file. For Superset, the &lt;code&gt;package.json&lt;/code&gt; file lives within the &lt;code&gt;superset/superset-frontend/&lt;/code&gt; folder. Let's switch into that folder.&lt;/p&gt;
&lt;p&gt;What's actually in this file? A. LOT. Let's break some of this down.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;{
  &amp;quot;name&amp;quot;: &amp;quot;superset&amp;quot;,
  &amp;quot;version&amp;quot;: &amp;quot;0.0.0dev&amp;quot;,
  &amp;quot;description&amp;quot;: &amp;quot;Superset is a data exploration platform designed to be visual, intuitive, and interactive.&amp;quot;,
  &amp;quot;keywords&amp;quot;: [
    &amp;quot;big&amp;quot;,
    &amp;quot;data&amp;quot;,
    &amp;quot;exploratory&amp;quot;,
    &amp;quot;analysis&amp;quot;,
    &amp;quot;react&amp;quot;,
    &amp;quot;d3&amp;quot;,
    &amp;quot;airbnb&amp;quot;,
    &amp;quot;nerds&amp;quot;,
    &amp;quot;database&amp;quot;,
    &amp;quot;flask&amp;quot;
  ],
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This line is interesting: &lt;code&gt;"version": "0.0.0dev".&lt;/code&gt; I wonder if this is where the Superset version value that's shown in the Superset UI lives? &lt;/p&gt;
&lt;p&gt;&lt;em&gt;As a quick detour, I wonder what this value in the &lt;code&gt;package.json&lt;/code&gt; file &lt;a href="https://github.com/apache/superset/blob/1.4/superset-frontend/package.json"&gt;in the Superset v1.4 release&lt;/a&gt; looks like?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Superset CLI" src="/images/superset_14_package.png"&gt;&lt;/p&gt;
&lt;p&gt;My hunch was right! 1.4 is harcoded as a string in the &lt;code&gt;package.json&lt;/code&gt; file. Cool!&lt;/p&gt;
&lt;p&gt;Then we can run &lt;code&gt;npm install&lt;/code&gt;, which should use the &lt;code&gt;superset-frontend/package.json&lt;/code&gt; file. But the documentation suggests &lt;code&gt;npm ci&lt;/code&gt;. &lt;a href="https://stackoverflow.com/a/53325242"&gt;Searching online suggests&lt;/a&gt; using &lt;code&gt;npm ci&lt;/code&gt; if there's an existing &lt;code&gt;package-lock.json&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;Because the project has an existing &lt;code&gt;package-lock.json&lt;/code&gt; file, let's use &lt;code&gt;npm ci&lt;/code&gt;!&lt;/p&gt;
&lt;p&gt;&lt;img alt="npm ci" src="/images/npm_ci_1.png"&gt;&lt;/p&gt;
&lt;p&gt;In the first half of the CLI output, I see that npm installed 5009 packages and displayed a bunch of deprecation warnings.&lt;/p&gt;
&lt;p&gt;&lt;img alt="npm ci" src="/images/npm_ci_2.png"&gt;&lt;/p&gt;
&lt;p&gt;In the second half of the CLI output, I see that there are 111 vulnerabilities. I'm noting both of these down (through this post!) to investigate later.&lt;/p&gt;
&lt;h3&gt;Build Frontend Assets&lt;/h3&gt;
&lt;p&gt;Next, as the guide suggests, I will run &lt;code&gt;npm run build&lt;/code&gt;. After a few minutes, I was presented with many warnings but some indication that the build succeeded?&lt;/p&gt;
&lt;p&gt;&lt;img alt="npm run build" src="/images/npm_run_build.png"&gt;&lt;/p&gt;
&lt;p&gt;Next, we can start the dev server at port &lt;code&gt;9000&lt;/code&gt; by running:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;npm run dev-server
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here's what the CLI output looks like with both the frontend and backend runinng simultaneously:&lt;/p&gt;
&lt;p&gt;&lt;img alt="backend and frontend" src="/images/backend_frontend.png"&gt;&lt;/p&gt;
&lt;p&gt;Exciting! Now if I head to &lt;code&gt;localhost:8088&lt;/code&gt;, I should see Superset:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Superset UI" src="/images/superset_ui.png"&gt;&lt;/p&gt;
&lt;p&gt;Hmm, that's curious. I'm logged in as the admin and I'm still seeing issues.&lt;/p&gt;
&lt;p&gt;Unfortunately I'm out of time for today, so I'll have to debug this on Day 4!&lt;/p&gt;</content><category term="Review"></category></entry><entry><title>Apache Superset from Scratch: Day 2 (Metadata Database)</title><link href="/apache-superset-from-scratch-day-2-metadata-database.html" rel="alternate"></link><published>2021-12-24T10:20:00-05:00</published><updated>2021-12-24T10:20:00-05:00</updated><author><name>Srini Kadamati</name></author><id>tag:None,2021-12-24:/apache-superset-from-scratch-day-2-metadata-database.html</id><summary type="html">&lt;p&gt;In Day 1, I setup the backend Python depedencies. Now, I'm going to start the metadata database. The next step, as laid out in &lt;a href="https://github.com/apache/superset/blob/master/CONTRIBUTING.md#setup-local-environment-for-development"&gt;CONTRIBUTING.MD&lt;/a&gt;, is to run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;superset db upgrade
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Superset CLI&lt;/h3&gt;
&lt;p&gt;Before we do that, I want to get more familiar with the Superset CLI. If you …&lt;/p&gt;</summary><content type="html">&lt;p&gt;In Day 1, I setup the backend Python depedencies. Now, I'm going to start the metadata database. The next step, as laid out in &lt;a href="https://github.com/apache/superset/blob/master/CONTRIBUTING.md#setup-local-environment-for-development"&gt;CONTRIBUTING.MD&lt;/a&gt;, is to run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;superset db upgrade
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Superset CLI&lt;/h3&gt;
&lt;p&gt;Before we do that, I want to get more familiar with the Superset CLI. If you recall from the last post, running &lt;code&gt;superset&lt;/code&gt; in the command line exposes a number of interesting commands we could run:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Superset CLI" src="/images/superset_cli2.png"&gt;&lt;/p&gt;
&lt;p&gt;Some interesting commands that stick out:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;db: Perform database migrations.&lt;/li&gt;
&lt;li&gt;export-dashboards: Export dashboards to JSON&lt;/li&gt;
&lt;li&gt;fab: FAB flask group commands&lt;/li&gt;
&lt;li&gt;init: Inits the Superset application&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Where does the code for these CLI commands live? After some searches in the Superset codebase, it's clear they live in the &lt;code&gt;superset/cli.py&lt;/code&gt; file. The CLI commands listed above map to function definitions. For example, here's the function definition for &lt;code&gt;superset init&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;@superset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nv"&gt;@with_appcontext&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;None&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;&amp;quot;&amp;quot;Inits the Superset application&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;appbuilder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_permissions&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;update_perms&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;security_manager&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sync_role_definitions&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It looks like there's no function declaration that maps to the &lt;code&gt;superset db&lt;/code&gt; CLI command, but instead the &lt;code&gt;db&lt;/code&gt; namespace is imported from another file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;superset.extensions&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;celery_app&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If we jump to &lt;code&gt;superset/extensions.py&lt;/code&gt;, we then see:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;db = SQLA()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;SQLA() sounds like SQLAlchemy, where is it defined or imported?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask_appbuilder&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;AppBuilder&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SQLA&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Neat! I know that Superset is built on top of Flask App Builder (or FAB for short), so this must be one of the important touchpoints. We'll avoid continuing down the rabbit hole for now, and dive deeper into FAB another day.&lt;/p&gt;
&lt;p&gt;Let's ask the CLI to list out all of the available commands within &lt;code&gt;superset db&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Superset CLI db" src="/images/superset_cli_db.png"&gt;&lt;/p&gt;
&lt;p&gt;Neat! Let's run &lt;code&gt;superset db upgrade&lt;/code&gt; now. As expected, a bunch of historical database migrations were run and applied.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Superset db upgrade" src="/images/superset_db_upgrade.png"&gt;&lt;/p&gt;
&lt;h3&gt;Where does the metadata database live?&lt;/h3&gt;
&lt;p&gt;Apparently, &lt;em&gt;some&lt;/em&gt; database somewhere was upgraded. But where does that database actually live? After some exploring online, it seems that by default this database resides as a single SQLite database file over in my home directory:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;cat ~/.superset/superset.db
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Running this command returns a long list of all the schema definitions. This is cool! I look forward to understanding the schemas later.&lt;/p&gt;
&lt;h3&gt;Creating default roles&lt;/h3&gt;
&lt;p&gt;Next up, we need to create an admin user in our metadata database (fancy word for our little SQLite database!):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;superset fab create-admin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Before we run the full command, what CLI commands are available within the &lt;code&gt;superset fab&lt;/code&gt; namespace?&lt;/p&gt;
&lt;p&gt;&lt;img alt="Superset CLI fab" src="/images/superset_cli_fab.png"&gt;&lt;/p&gt;
&lt;p&gt;The commands here let us create admin users, create regular users, create database objects, reset a user's password, and more. Let's create an admin user by running &lt;code&gt;superset fab create-admin&lt;/code&gt;. To keep this simple during exploration, I just answered &lt;strong&gt;admin&lt;/strong&gt; for every line in the wizard:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Superset fab create-admin" src="/images/fab_create_admin.png"&gt;&lt;/p&gt;
&lt;p&gt;We now have an admin username (&lt;strong&gt;admin&lt;/strong&gt;) and password (&lt;strong&gt;admin&lt;/strong&gt;) combination for logging in to Superset, when the time is right. Next, let's create the rest of the roles and permissions:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;superset init
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It's interesting that this command isn't part of the &lt;code&gt;superset fab&lt;/code&gt; command list.&lt;/p&gt;
&lt;h3&gt;Example Data&lt;/h3&gt;
&lt;p&gt;Let's load up the example datasets and dashboards, many of which were actually created by yours truly!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;superset&lt;/span&gt; &lt;span class="nb"&gt;load&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;examples&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;What all is loaded? How does this actually work? For fun, let's dive into the functions &amp;amp; relevant codepaths. Let's start with the function definition for &lt;code&gt;superset load-examples&lt;/code&gt;. To follow Pythonic syntax, we need to instead look for &lt;code&gt;load_examples()&lt;/code&gt; in &lt;code&gt;superset/cli.py&lt;/code&gt;. Here's the function declaration:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nd"&gt;@with_appcontext&lt;/span&gt;
&lt;span class="nd"&gt;@superset&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="nd"&gt;@click&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;option&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;--load-test-data&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;-t&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;is_flag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Load additional test data&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nd"&gt;@click&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;option&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;--load-big-data&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;-b&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;is_flag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Load additional big data&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nd"&gt;@click&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;option&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;--only-metadata&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;-m&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;is_flag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Only load metadata, skip actual data&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nd"&gt;@click&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;option&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;--force&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;-f&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;is_flag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Force load data even if table already exists&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;load_examples&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;load_test_data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;load_big_data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;only_metadata&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;bool&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;force&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;bool&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Loads a set of Slices and Dashboards and a supporting dataset&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;load_examples_run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;load_test_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;load_big_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;only_metadata&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;force&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;While most of the code focuses on the possible CLI options &amp;amp; function parameters, the actual function definition is a single line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;load_examples_run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;load_test_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;load_big_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;only_metadata&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;force&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If we jump to that function declaration, it's much much longer. This must be where the meat of the logic is for loading examples. Here's a screenshot of just the first half!&lt;/p&gt;
&lt;p&gt;&lt;img alt="Load Examples Run" src="/images/load_examples_run.png"&gt;&lt;/p&gt;
&lt;p&gt;This line looks interesting:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;superset&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;examples&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If I poke through the file structure for Superset, I find a folder dedicated to examples (&lt;code&gt;superset/examples&lt;/code&gt;). The &lt;code&gt;__init__.py&lt;/code&gt; file for this folder defines each function mapping:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Examples Directory" src="/images/examples_directory.png"&gt;&lt;/p&gt;
&lt;p&gt;Cool! What should I look at next?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;examples&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load_css_templates&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Superset ships with two default CSS templates for dashboards, so this code is likely how that data is loaded. Let's crack open the &lt;code&gt;def load_css_tesmplates()&lt;/code&gt; function, which lives in &lt;code&gt;superset/examples/load_css_templates.py&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Load CSS Templates" src="/images/load_css_templates.png"&gt;&lt;/p&gt;
&lt;p&gt;Each CSS template is loaded one after another. Let's step through the key parts of the code to better understand it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;obj = db.session.query(CssTemplate).filter_by(template_name=&amp;quot;Flat&amp;quot;).first()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here we see the &lt;code&gt;db&lt;/code&gt; object again, from earlier. Unsurprisingly, there's a matching import statement for it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;superset&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;superset.models.core&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;CssTemplate&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The CssTemplate data model itself looks very simple, as defined in &lt;code&gt;superset/models/core.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;CssTemplate&lt;/span&gt;(&lt;span class="n"&gt;Model&lt;/span&gt;, &lt;span class="n"&gt;AuditMixinNullable&lt;/span&gt;):

    &lt;span class="s"&gt;&amp;quot;&amp;quot;&amp;quot;CSS templates for dashboards&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="n"&gt;__tablename__&lt;/span&gt; = &lt;span class="s"&gt;&amp;quot;css_templates&amp;quot;&lt;/span&gt;
    &lt;span class="nb"&gt;id&lt;/span&gt; = &lt;span class="n"&gt;Column&lt;/span&gt;(&lt;span class="n"&gt;Integer&lt;/span&gt;, &lt;span class="n"&gt;primary_key&lt;/span&gt;=&lt;span class="nb"&gt;True&lt;/span&gt;)
    &lt;span class="n"&gt;template_name&lt;/span&gt; = &lt;span class="n"&gt;Column&lt;/span&gt;(&lt;span class="n"&gt;String&lt;/span&gt;(&lt;span class="mi"&gt;250&lt;/span&gt;))
    &lt;span class="n"&gt;css&lt;/span&gt; = &lt;span class="n"&gt;Column&lt;/span&gt;(&lt;span class="n"&gt;Text&lt;/span&gt;, &lt;span class="k"&gt;default&lt;/span&gt;=&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As a mental note to myself, this table is named &lt;strong&gt;css_templates&lt;/strong&gt; in the metadata database.&lt;/p&gt;
&lt;p&gt;The rest of the code &lt;em&gt;smells&lt;/em&gt; a lot like SQLAlchemy syntax:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;db.session.query(CssTemplate).filter_by(template_name=&amp;quot;Flat&amp;quot;).first()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;While I'm not too familiar with the Superset data model yet, this code likely:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Attaches to a SQLAlchemy session / transaction&lt;/li&gt;
&lt;li&gt;Queries the metadata database, searching for a matching CssTemplate object with the name &lt;strong&gt;Flat&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;And the &lt;code&gt;first()&lt;/code&gt; at the end is probably just for good measure, in case there are duplicate results&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The goal likely here is to search for an existing entry in the metadata database for the &lt;strong&gt;Flat&lt;/strong&gt; CSS template. If an existing entry in the metadata database wasn't found, a new CssTemplate object is instantiated for the purpose of inserting later:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;not&lt;/span&gt; &lt;span class="nv"&gt;obj&lt;/span&gt;:
    &lt;span class="nv"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;CssTemplate&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;template_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;Flat&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then, the CSS itself is defined as a hard-coded string (shortened extensively below):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;css&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;textwrap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;dedent&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;\&lt;/span&gt;
&lt;span class="s2"&gt;    .navbar {&lt;/span&gt;
&lt;span class="s2"&gt;        transition: opacity 0.5s ease;&lt;/span&gt;
&lt;span class="s2"&gt;        opacity: 0.05;&lt;/span&gt;
&lt;span class="s2"&gt;    }&lt;/span&gt;
&lt;span class="s2"&gt;    ....&lt;/span&gt;
&lt;span class="s2"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Finally, the string is set to the instianted CssTemplate object's &lt;code&gt;css&lt;/code&gt; column and inserted into the metadata database:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;obj.css = css
    db.session.merge(obj)
    db.session.commit()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This whole process is then repeated to add the &lt;strong&gt;Courier Black&lt;/strong&gt; CSS template.&lt;/p&gt;
&lt;p&gt;Phew! This was just the CSS templates. No example datasets or example dashboards yet. Because I'm running out of time today, I'll circle back to the code paths for those a later day.&lt;/p&gt;
&lt;h3&gt;Starting Flask Server&lt;/h3&gt;
&lt;p&gt;The last step now is to fire up the Flask server and see how Superset looks in the web browser.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;FLASK_ENV&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;development&lt;/span&gt; &lt;span class="n"&gt;superset&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="mi"&gt;8088&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;with&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;threads&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;reload&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;debugger&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;By default, Flask will run on port 8088 but we can change the port number by changing the value we put in the invocation.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Flask Server" src="/images/flask_server.png"&gt;&lt;/p&gt;
&lt;p&gt;We're shown a somewhat incomplete and outdated login screen. This is interesting.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Superset Login" src="/images/superset_login.png"&gt;&lt;/p&gt;
&lt;p&gt;My guess here is that somewhere, the frontend assets need to be built. This seems to align with the comments listed before the flask server initialization instructions:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;# &lt;span class="nv"&gt;Start&lt;/span&gt; &lt;span class="nv"&gt;the&lt;/span&gt; &lt;span class="nv"&gt;Flask&lt;/span&gt; &lt;span class="nv"&gt;dev&lt;/span&gt; &lt;span class="nv"&gt;web&lt;/span&gt; &lt;span class="nv"&gt;server&lt;/span&gt; &lt;span class="nv"&gt;from&lt;/span&gt; &lt;span class="nv"&gt;inside&lt;/span&gt; &lt;span class="nv"&gt;your&lt;/span&gt; &lt;span class="nv"&gt;virtualenv&lt;/span&gt;.
# &lt;span class="nv"&gt;Note&lt;/span&gt; &lt;span class="nv"&gt;that&lt;/span&gt; &lt;span class="nv"&gt;your&lt;/span&gt; &lt;span class="nv"&gt;page&lt;/span&gt; &lt;span class="nv"&gt;may&lt;/span&gt; &lt;span class="nv"&gt;not&lt;/span&gt; &lt;span class="nv"&gt;have&lt;/span&gt; &lt;span class="nv"&gt;CSS&lt;/span&gt; &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;this&lt;/span&gt; &lt;span class="nv"&gt;point&lt;/span&gt;.
# &lt;span class="nv"&gt;See&lt;/span&gt; &lt;span class="nv"&gt;instructions&lt;/span&gt; &lt;span class="nv"&gt;below&lt;/span&gt; &lt;span class="nv"&gt;how&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt; &lt;span class="nv"&gt;build&lt;/span&gt; &lt;span class="nv"&gt;the&lt;/span&gt; &lt;span class="nv"&gt;front&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="nv"&gt;assets&lt;/span&gt;.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Let's save frontend for Day 3!&lt;/p&gt;</content><category term="Review"></category></entry><entry><title>Apache Superset from Scratch: Day 1 (Python Setup)</title><link href="/apache-superset-from-scratch-day-1-python-setup.html" rel="alternate"></link><published>2021-12-23T10:20:00-05:00</published><updated>2021-12-23T10:20:00-05:00</updated><author><name>Srini Kadamati</name></author><id>tag:None,2021-12-23:/apache-superset-from-scratch-day-1-python-setup.html</id><summary type="html">&lt;p&gt;I'm on a quest, to understand and map out as much of the &lt;a href="https://superset.apache.org/"&gt;Apache Superset&lt;/a&gt; code base as I can. In my &lt;a href="https://linkedin.com/in/srinivasakadamati"&gt;day job&lt;/a&gt;, I have the opportunity to &lt;em&gt;use&lt;/em&gt; Superset on a daily basis but I'm not intimately familiar with the code paths themselves. This series will revolve around …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I'm on a quest, to understand and map out as much of the &lt;a href="https://superset.apache.org/"&gt;Apache Superset&lt;/a&gt; code base as I can. In my &lt;a href="https://linkedin.com/in/srinivasakadamati"&gt;day job&lt;/a&gt;, I have the opportunity to &lt;em&gt;use&lt;/em&gt; Superset on a daily basis but I'm not intimately familiar with the code paths themselves. This series will revolve around the process on a M1 Macbook Air, but should generalize to most *nix systems.&lt;/p&gt;
&lt;p&gt;My goal is to make noticeable progress on a daily basis. With the preamble out of the way, let's start!&lt;/p&gt;
&lt;h3&gt;Contributing.md&lt;/h3&gt;
&lt;p&gt;The Superset codebase is large; where does one even begin? For new code bases, I generally like alternating between:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;breadth&lt;/em&gt;: starting with an overview of the development / contributor's guide&lt;/li&gt;
&lt;li&gt;&lt;em&gt;depth&lt;/em&gt;: recursively going through each component &amp;amp; sub-component&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For breadth, I'll start with the &lt;a href="https://github.com/apache/superset/blob/master/CONTRIBUTING.md#setup-local-environment-for-development"&gt;Setup Local Environment for Development&lt;/a&gt; section from CONTRIBUTING.MD.&lt;/p&gt;
&lt;h3&gt;Python 3.8&lt;/h3&gt;
&lt;p&gt;Python 3.7.x or 3.8.x are recommended for running the Superset backend. I'm on a Mac, and prefer to leave the default &lt;code&gt;python&lt;/code&gt; that ships with the operating system to 2.7.x. Instead, I'll use &lt;a href="https://brew.sh/"&gt;Homebrew&lt;/a&gt; to install Python 3.8:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;brew&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;install&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="mf"&gt;@3.8&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, both the &lt;code&gt;python3&lt;/code&gt; and &lt;code&gt;pip3&lt;/code&gt; commands work as expected (independent of the &lt;code&gt;python&lt;/code&gt; and &lt;code&gt;pip&lt;/code&gt; commands)!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;python3 --version&lt;/code&gt; returns&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Python 3.8.12&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pip3 --version&lt;/code&gt; returns&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pip 21.2.4 from /opt/homebrew/lib/python3.8/site-packages/pip (python 3.8)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Virtualenv&lt;/h3&gt;
&lt;p&gt;Now time to create a Python virtual environment. Virtual environment is really a sandbox for your Python libraries that lives within a specific folder / project. This workflow gives you a few benefits:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Virtual environment lives completely independent of the global Python sandbox&lt;/li&gt;
&lt;li&gt;It's super quick and easy to delete all of the project specific Python libraries and re-install, as an escape hatch&lt;/li&gt;
&lt;li&gt;Less time wasted (not zero sadly) dealing with version / dependency conflicts&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Are there any downsides?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The main one is increased storage requirements, because every Python project on your computer has its own copies of similar libraries&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;First, let me install &lt;code&gt;virtualenv&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pip3 install virtualenv
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Next, let's give our virtual environment a name. The &lt;code&gt;virtualenv&lt;/code&gt; creates a folder within your project folder and stuffs all of the Python libraries you install there. So we're really trying to decide on the &lt;em&gt;name&lt;/em&gt; of this folder.&lt;/p&gt;
&lt;p&gt;The CONTRIBUTING.MD file in the Superset repo suggests naming it &lt;code&gt;venv&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;python3 -m venv venv
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;The first &lt;code&gt;venv&lt;/code&gt; is short-hand for &lt;code&gt;virtualenv&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The second &lt;code&gt;venv&lt;/code&gt; refers to the name of the folder we're creating (&lt;code&gt;../superset/venv/&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Why should we name it &lt;code&gt;venv/&lt;/code&gt;? One hint is in the &lt;code&gt;.gitignore&lt;/code&gt; file, which &lt;a href="https://git-scm.com/docs/gitignore"&gt;specifies files &amp;amp; folder paths to ignore in version control&lt;/a&gt;. This means that each user can have their own local state and those details won't get checked into version control. &lt;/p&gt;
&lt;p&gt;The &lt;code&gt;.gitignore&lt;/code&gt; file itself &lt;em&gt;is&lt;/em&gt; version controlled though. So this file provides a "universal" agreemenet between all of the contributors to Superset that these files should not be checked into version control. Let's search for any string values containing "env" in the &lt;code&gt;.gitignore&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;cat .gitignore | grep &amp;#39;env&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This returns:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="na"&gt;.env&lt;/span&gt;
&lt;span class="na"&gt;.envrc&lt;/span&gt;
&lt;span class="nf"&gt;env&lt;/span&gt;
&lt;span class="nf"&gt;venv&lt;/span&gt;&lt;span class="p"&gt;*&lt;/span&gt;
&lt;span class="nf"&gt;env_py3&lt;/span&gt;
&lt;span class="nf"&gt;envpy3&lt;/span&gt;
&lt;span class="nf"&gt;env36&lt;/span&gt;
&lt;span class="nf"&gt;venv&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;While some open source projects use the &lt;code&gt;.venv/&lt;/code&gt; convention for virtualenv, the Superset one uses &lt;code&gt;venv&lt;/code&gt; it seems. So this means:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;we can party in our local &lt;code&gt;venv/&lt;/code&gt; and none of those changes will make it into any code PR's we may want to make&lt;/li&gt;
&lt;li&gt;if we want to use &lt;code&gt;.venv/&lt;/code&gt; instead, the git version control system will detect a change&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let's stick to the community convention, and run the suggested command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;python3 -m venv venv
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If we run &lt;code&gt;ls&lt;/code&gt; while within the &lt;code&gt;superset/&lt;/code&gt; folder, we'll see &lt;code&gt;venv&lt;/code&gt; listed as a folder. Success!&lt;/p&gt;
&lt;h3&gt;Python Dependencies&lt;/h3&gt;
&lt;p&gt;Usually, the Python requirements are specified in a &lt;code&gt;requirements.txt&lt;/code&gt; file. In the case of Superset, we're blessed with a folder of &lt;code&gt;.in&lt;/code&gt; and &lt;code&gt;.txt&lt;/code&gt; files. There's a lot we could explore and unpack here, but I'm going to focus on getting everything setup first.&lt;/p&gt;
&lt;p&gt;If we look to CONTRIBUTING.MD, we see:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pip install -r requirements/testing.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If we open that file, we see something that resembles a standard &lt;code&gt;requirements.txt&lt;/code&gt; file, but with this header:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;# This file is autogenerated by pip-compile-multi
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I've made a mental note to investigate &amp;amp; explore &lt;code&gt;pip-compile-multi&lt;/code&gt; later, a library for compiling multiple requirement files. For now, let's run the following command to install the dependencies:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pip3 install -r requirements/testing.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Error 1: MySQL&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I ran into this issue with red scary error text while on my M1 Macbook computer:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;Collecting&lt;/span&gt; &lt;span class="n"&gt;mysqlclient&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mf"&gt;2.1.0&lt;/span&gt;
  &lt;span class="n"&gt;Using&lt;/span&gt; &lt;span class="n"&gt;cached&lt;/span&gt; &lt;span class="n"&gt;mysqlclient&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;2.1.0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tar&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gz&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;87&lt;/span&gt; &lt;span class="n"&gt;kB&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;ERROR&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Command&lt;/span&gt; &lt;span class="n"&gt;errored&lt;/span&gt; &lt;span class="n"&gt;out&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;exit&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
     &lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;homebrew&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="mf"&gt;3.8&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nb"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;python3&lt;/span&gt;&lt;span class="mf"&gt;.8&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;import io, os, sys, setuptools, tokenize; sys.argv[0] = &amp;#39;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/private/var/folders/6d/f0fzvlyn6sd58q5rmx6s6df00000gn/T/pip-install-6c548wua/mysqlclient_a8c054d3233d4d00acb42d6a6bf2a562/setup.py&amp;#39;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;; __file__=&amp;#39;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/private/var/folders/6d/f0fzvlyn6sd58q5rmx6s6df00000gn/T/pip-install-6c548wua/mysqlclient_a8c054d3233d4d00acb42d6a6bf2a562/setup.py&amp;#39;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;;f = getattr(tokenize, &amp;#39;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;open&amp;#39;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;, open)(__file__) if os.path.exists(__file__) else io.StringIO(&amp;#39;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;from setuptools import setup; setup()&amp;#39;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;);code = f.read().replace(&amp;#39;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;, &amp;#39;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;);f.close();exec(compile(code, __file__, &amp;#39;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;exec&amp;#39;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;))&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;egg_info&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;egg&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;base&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;private&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;folders&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;f0fzvlyn6sd58q5rmx6s6df00000gn&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pip&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pip&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;egg&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;0735&lt;/span&gt;&lt;span class="n"&gt;tk4h&lt;/span&gt;

     &lt;span class="n"&gt;WARNING&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Discarding&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pythonhosted&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;packages&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;de&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;79&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;d02be3cb942afda6c99ca207858847572e38146eb73a7c4bfe3bdf154626&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mysqlclient&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;2.1.0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tar&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gz&lt;/span&gt;&lt;span class="c1"&gt;#sha256=973235686f1b720536d417bf0a0d39b4ab3d5086b2b6ad5e6752393428c02b12 (from https://pypi.org/simple/mysqlclient/) (requires-python:&amp;gt;=3.5). Command errored out with exit status 1: python setup.py egg_info Check the logs for full command output.&lt;/span&gt;
    &lt;span class="n"&gt;ERROR&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Could&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;find&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;satisfies&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;requirement&lt;/span&gt; &lt;span class="n"&gt;mysqlclient&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mf"&gt;2.1.0&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;versions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;1.3.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.3.1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.3.2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.3.3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.3.4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.3.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.3.6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.3.7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.3.8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.3.9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.3.10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.3.11&lt;/span&gt;&lt;span class="n"&gt;rc1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.3.11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.3.12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.3.13&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.3.14&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.4.0&lt;/span&gt;&lt;span class="n"&gt;rc1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.4.0&lt;/span&gt;&lt;span class="n"&gt;rc2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.4.0&lt;/span&gt;&lt;span class="n"&gt;rc3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.4.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.4.1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.4.2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.4.2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.4.3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.4.4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.4.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.4.6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;2.0.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;2.0.1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;2.0.2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;2.0.3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;2.1.0&lt;/span&gt;&lt;span class="n"&gt;rc1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;2.1.0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;ERROR&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;No&lt;/span&gt; &lt;span class="n"&gt;matching&lt;/span&gt; &lt;span class="n"&gt;distribution&lt;/span&gt; &lt;span class="n"&gt;found&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;mysqlclient&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mf"&gt;2.1.0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Some &lt;a href="https://stackoverflow.com/questions/66669728/trouble-installing-mysql-client-on-mac"&gt;StackOverflow sleuthing suggested&lt;/a&gt; that I needed to install MySQL server via homebrew so the installation process for the Python client library would work. So this may not be an M1 related issue after all:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;brew install mysql
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Error 2: Postgres&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;While &lt;code&gt;mysql-client&lt;/code&gt; succeeded, pip now got stuck on postgres:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;pg_config&lt;/span&gt; &lt;span class="n"&gt;executable&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="n"&gt;found&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;

&lt;span class="n"&gt;pg_config&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;required&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt; &lt;span class="n"&gt;psycopg2&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;  &lt;span class="n"&gt;Please&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;directory&lt;/span&gt;
&lt;span class="n"&gt;containing&lt;/span&gt; &lt;span class="n"&gt;pg_config&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;$PATH&lt;/span&gt; &lt;span class="n"&gt;or&lt;/span&gt; &lt;span class="n"&gt;specify&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;full&lt;/span&gt; &lt;span class="n"&gt;executable&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt;
&lt;span class="n"&gt;option&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;

    &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;py&lt;/span&gt; &lt;span class="n"&gt;build_ext&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;pg&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="sr"&gt;/path/to/&lt;/span&gt;&lt;span class="n"&gt;pg_config&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="n"&gt;or&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;pg_config&lt;/span&gt; &lt;span class="n"&gt;option&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;setup.cfg&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;

&lt;span class="n"&gt;If&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="n"&gt;prefer&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;avoid&lt;/span&gt; &lt;span class="n"&gt;building&lt;/span&gt; &lt;span class="n"&gt;psycopg2&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;please&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;PyPI&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;psycopg2-binary&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;instead.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Let's check out &lt;a href="https://stackoverflow.com/questions/20170895/mac-virtualenv-pip-postgresql-error-pg-config-executable-not-found"&gt;Stack Overflow again&lt;/a&gt;. I like using the &lt;a href="https://postgresapp.com/"&gt;Postgres Mac app&lt;/a&gt;, which contains a &lt;code&gt;pg_config&lt;/code&gt; executable. So I'm going to &lt;/p&gt;
&lt;p&gt;I'm going to move forward with finding the path to the &lt;code&gt;pg_config&lt;/code&gt; file and add it to my PATH. I'll first crack open the Postgres.app folder:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Opening Postgres.app Folder" src="/images/app_show_package_contents.png"&gt;&lt;/p&gt;
&lt;p&gt;After jumping through folders, I found the &lt;code&gt;pg_config&lt;/code&gt; executable. As suggested in StackOverflow, I'm going to add that executable's folder to my PATH:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="n"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=$&lt;/span&gt;&lt;span class="n"&gt;PATH&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Applications&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Postgres&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Contents&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Versions&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now when I &lt;code&gt;pip3 install -r requirements/testing.txt&lt;/code&gt; again, everything works beautifully!&lt;/p&gt;
&lt;h3&gt;Editable Superset&lt;/h3&gt;
&lt;p&gt;Now, we're ready to install Superset in "editable" mode. Editable mode lets us modify and test code changes in Superset quickly, which is ideal when developing features or fixing bugs.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pip3 install -e .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To test the installation, run the &lt;code&gt;superset&lt;/code&gt; command and the Superset CLI should appear:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Superset CLI" src="/images/superset_cli2.png"&gt;&lt;/p&gt;
&lt;h3&gt;Next Up&lt;/h3&gt;
&lt;p&gt;That's it for Day 1. In Day 2, I'll play with setting up the metadata database, creating roles &amp;amp; permissions, loading example data, and starting the backend server. &lt;/p&gt;
&lt;p&gt;If you want to follow along, use the &lt;a href="/feeds/all.atom.xml"&gt;RSS feed&lt;/a&gt;. Stay tuned! 📺&lt;/p&gt;</content><category term="Review"></category></entry></feed>